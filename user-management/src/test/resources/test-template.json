{
  "Description": "Cloudformation Stack for Testing the Provisioning Service",
  "Mappings": {
  },
  "Parameters": {
  },
  "Resources": {
    "GhapTestUserManagementServiceInstance": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "sambainit",
              "sambapasswordsettings",
              "sambarestart"
            ]
          },
          "sambainit": {
            "files": {
              "/etc/hosts": {
                "content": "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n"
              },
              "/etc/sysconfig/network": {
                "content": "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=samba-test.dev.ghap.io\n"
              },
              "/etc/yum.repos.d/sernet-samba-4.2.repo": {
                "content" : { "Fn::Join" : ["\n",
                  [
                    "[sernet-samba-4.2]\n",
                    "name=SerNet Samba 4.2 Packages (centos-6)\n",
                    "type=rpm-md\n",
                    "baseurl=https://scnagy:WHyBIkFvXH9iO78sBMx88Wjx7v8zVdQp@download.sernet.de/packages/samba/4.2/centos/6/\n",
                    "gpgcheck=1\n",
                    "gpgkey=https://scnagy:WHyBIkFvXH9iO78sBMx88Wjx7v8zVdQp@download.sernet.de/packages/samba/4.2/centos/6/repodata/repomd.xml.key\n",
                    "enabled=1\n"
                  ]
                ]}
              }
            },
            "commands": {
              "restart": {
                "command": "yum -y update sernet-samba\n",
                "ignoreErrors": false
              }
            }
          },
          "sambapasswordsettings" : {
            "commands" : {
              "samba-password-settings" : {
                "command" : "samba-tool domain passwordsettings set --complexity=on --store-plaintext=off --history-length=24 --min-pwd-length=8 --min-pwd-age=0 --max-pwd-age=90 --account-lockout-duration=30 --account-lockout-threshold=6 --reset-account-lockout-after=30\n",
                "ignoreErrors" : "false"
              }
            }
          },
          "sambarestart": {
            "commands": {
              "restart": {
                "command": "/sbin/service sernet-samba-ad restart\n",
                "ignoreErrors": false
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "ImageId": "ami-49b85c22",
        "InstanceType": "t2.micro",
        "KeyName": "ghap-dev",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress" : true,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "GhapTestSecurityGroup" } ],
           "SubnetId": { "Ref": "GhapTestPublicSubnet" }
          }
        ],
        "SourceDestCheck": false,
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "hostname samba-test\n",
                "cfn-init -s ",{ "Ref": "AWS::StackName" },
                "         -r GhapTestUserManagementServiceInstance ",
                "         -c InstallAndRun \n",
                "# Signal the status from cfn-init\n",
                "cfn-signal -e $? ",
                "           --stack=",{"Ref": "AWS::StackName"},
                "           --resource=GhapTestUserManagementServiceInstance \n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "GhapTestVPC": {
      "Properties": {
        "CidrBlock": "10.10.0.0/16"
      },
      "Type": "AWS::EC2::VPC"
    },
    "GhapTestInternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "GhapTestGatewayToInternet": {
      "DependsOn": [
        "GhapTestInternetGateway",
        "GhapTestVPC"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        },
        "InternetGatewayId": {
          "Ref": "GhapTestInternetGateway"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "GhapTestPublicSubnet": {
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": "10.10.12.0/24",
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "GhapTestPublicRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "GhapTestPublicSubnetRouteTableAssociation": {
      "DependsOn": [
        "GhapTestPublicSubnet",
        "GhapTestPublicRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "GhapTestPublicSubnet"
        },
        "RouteTableId": {
          "Ref": "GhapTestPublicRouteTable"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "GhapTestPublicRoute": {
      "DependsOn": [
        "GhapTestPublicRouteTable"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "GhapTestPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "GhapTestInternetGateway"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "GhapTestPublicNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "GhapTestInboundLdapPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "389",
          "To": "389"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestInboundSSHPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestInboundEphemeralPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestOutboundPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestPublicSubnetNetworkAclAssociation": {
      "DependsOn": [
        "GhapTestPublicSubnet",
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "GhapTestPublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "GhapTestSecurityGroup": {
      "Properties": {
        "GroupDescription": "Ghap Test Security Group",
        "VpcId": { "Ref": "GhapTestVPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "6",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "6",
            "FromPort" : "389",
            "ToPort" : "5432",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress"  : [
          {
            "IpProtocol" : "-1",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    }
  },
  "Outputs" : {
    "PublicIp" : {
      "Value" : {"Fn::GetAtt" : ["GhapTestUserManagementServiceInstance", "PublicIp"] },
      "Description" : "Test Instance Ip for Provisioning Service"
    }
  }
}
