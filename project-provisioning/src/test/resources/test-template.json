{
  "Description": "Cloudformation Stack for Testing the Provisioning Service",
  "Mappings": {
  },
  "Parameters": {
  },
  "Resources": {
    "GhapTestStashInstanceIP": {
      "Properties": {
        "Domain": "vpc"
      },
      "Type": "AWS::EC2::EIP"
    },
    "GhapTestStashAssociateEip": {
      "Type": "AWS::EC2::EIPAssociation",
      "Properties": {
        "EIP": {"Ref":"GhapTestStashInstanceIP"},
        "InstanceId": {"Ref":"GhapTestStashInstance"}
      }
    },
    "GhapTestStashInstance": {
      "CreationPolicy": {
        "ResourceSignal": { "Timeout": "PT30M" }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "InstallAndRun": [
              "stashinit"
            ]
          },
          "stashinit": {
            "files": {
              "/etc/httpd/conf.d/rewrite.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "RewriteEngine on\nRewriteCond %{HTTPS} =off\nRewriteLog /var/log/httpd/rewrite_log\nRewriteLogLevel 1\nRewriteRule /stash ",
                      "https://",
                      {
                        "Ref": "GhapTestStashInstanceIP"
                      },
                      "%{REQUEST_URI} [L]\n"
                    ]
                  ]
                }
              },
              "/etc/sysconfig/network": {
                "content": "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=stash-test.dev.ghap.io\n"
              },
              "/atlassian/stash/atlassian-stash-3.8.0/conf/server.xml": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "<?xml version='1.0' encoding='utf-8'?>",
                      "<Server port=\"8006\" shutdown=\"SHUTDOWN\">",
                      "<GlobalNamingResources>",
                      "<Resource name=\"UserDatabase\" auth=\"Container\" type=\"org.apache.catalina.UserDatabase\" description=\"User database that can be updated and saved\" factory=\"org.apache.catalina.users.MemoryUserDatabaseFactory\" pathname=\"conf/tomcat-users.xml\" />",
                      "</GlobalNamingResources>",
                      "<Service name=\"Catalina\">",
                      {
                        "Fn::Join": [
                          " ",
                          [
                            "<Connector",
                            "port=\"7990\"",
                            "protocol=\"HTTP/1.1\"",
                            "connectionTimeout=\"20000\"",
                            "useBodyEncodingForURI=\"true\"",
                            "redirectPort=\"8443\"",
                            {"Fn::Join": ["",["proxyName=\"",{"Ref":"GhapTestStashInstanceIP"},"\""]]},
                            "proxyPort=\"443\"",
                            "scheme=\"https\"",
                            "compression=\"on\"",
                            "compressableMimeType=\"text/html,text/xml,text/plain,text/css,application/json,application/javascript,application/x-javascript\" />"
                          ]
                        ]
                      },
                      "<Engine name=\"Catalina\" defaultHost=\"localhost\">",
                      "<Realm className=\"org.apache.catalina.realm.LockOutRealm\">",
                      "<Realm className=\"org.apache.catalina.realm.UserDatabaseRealm\" resourceName=\"UserDatabase\"/></Realm>",
                      "<Host name=\"localhost\" appBase=\"webapps\" unpackWARs=\"true\" autoDeploy=\"true\" xmlValidation=\"false\" xmlNamespaceAware=\"false\">",
                      "<Context docBase=\"${catalina.home}/atlassian-stash\" path=\"/stash\" reloadable=\"false\" useHttpOnly=\"true\"/>",
                      "<Valve className=\"org.apache.catalina.authenticator.SingleSignOn\"/>",
                      "</Host>",
                      "</Engine>",
                      "</Service>",
                      "</Server>"
                    ]
                  ]
                }
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "ip6tables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "iptables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "postfix": {
                  "enabled": "false",
                  "ensureRunning": "false"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "ImageId": "ami-9189e9f4",
        "InstanceType": "t2.micro",
        "KeyName": "ghap-dev",
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": true,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "GhapTestSecurityGroup" } ],
            "SubnetId": { "Ref": "GhapTestPublicSubnet" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "hostname stash-test\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                "         -r GhapTestStashInstance ",
                "         -c InstallAndRun \n",
                "# Signal the status from cfn-init\n",
                "cfn-signal -e $? ",
                "           --stack=",
                { "Ref": "AWS::StackName" },
                "           --resource=GhapTestStashInstance \n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },
    "GhapTestVPC": {
      "Properties": {
        "CidrBlock": "10.10.0.0/16"
      },
      "Type": "AWS::EC2::VPC"
    },
    "GhapTestInternetGateway": {
      "Properties": {
        "Tags": [
          {
            "Key": "Network",
            "Value": "Public"
          }
        ]
      },
      "Type": "AWS::EC2::InternetGateway"
    },
    "GhapTestGatewayToInternet": {
      "DependsOn": [
        "GhapTestInternetGateway",
        "GhapTestVPC"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        },
        "InternetGatewayId": {
          "Ref": "GhapTestInternetGateway"
        }
      },
      "Type": "AWS::EC2::VPCGatewayAttachment"
    },
    "GhapTestPublicSubnet": {
      "Properties": {
        "AvailabilityZone": "us-east-1c",
        "CidrBlock": "10.10.12.0/24",
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::Subnet"
    },
    "GhapTestPublicRouteTable": {
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::RouteTable"
    },
    "GhapTestPublicSubnetRouteTableAssociation": {
      "DependsOn": [
        "GhapTestPublicSubnet",
        "GhapTestPublicRouteTable"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "GhapTestPublicSubnet"
        },
        "RouteTableId": {
          "Ref": "GhapTestPublicRouteTable"
        }
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation"
    },
    "GhapTestPublicRoute": {
      "DependsOn": [
        "GhapTestPublicRouteTable"
      ],
      "Properties": {
        "RouteTableId": {
          "Ref": "GhapTestPublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "GhapTestInternetGateway"
        }
      },
      "Type": "AWS::EC2::Route"
    },
    "GhapTestPublicNetworkAcl": {
      "Properties": {
        "VpcId": {
          "Ref": "GhapTestVPC"
        }
      },
      "Type": "AWS::EC2::NetworkAcl"
    },
    "GhapTestInboundSSHPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "102",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "22",
          "To": "22"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestInboundHttpPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "103",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "80",
          "To": "80"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestInboundHttpsPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "104",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "443",
          "To": "443"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestInboundEphemeralPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "105",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestOutboundPublicNetworkAclEntry": {
      "DependsOn": [
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        },
        "RuleNumber": "100",
        "Protocol": "6",
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0",
        "PortRange": {
          "From": "0",
          "To": "65535"
        }
      },
      "Type": "AWS::EC2::NetworkAclEntry"
    },
    "GhapTestPublicSubnetNetworkAclAssociation": {
      "DependsOn": [
        "GhapTestPublicSubnet",
        "GhapTestPublicNetworkAcl"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "GhapTestPublicSubnet"
        },
        "NetworkAclId": {
          "Ref": "GhapTestPublicNetworkAcl"
        }
      },
      "Type": "AWS::EC2::SubnetNetworkAclAssociation"
    },
    "GhapTestSecurityGroup": {
      "Properties": {
        "GroupDescription": "Ghap Test Security Group",
        "VpcId": { "Ref": "GhapTestVPC" },
        "SecurityGroupIngress" : [
          {
            "IpProtocol" : "6",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "6",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : "0.0.0.0/0"
          },
          {
            "IpProtocol" : "6",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress"  : [
          {
            "IpProtocol" : "-1",
            "FromPort" : "0",
            "ToPort" : "65535",
            "CidrIp" : "0.0.0.0/0"
          }
        ]
      },
      "Type": "AWS::EC2::SecurityGroup"
    }
  },
  "Outputs" : {
    "PublicIp" : {
      "Value" : {"Ref" : "GhapTestStashInstanceIP" },
      "Description" : "Test Instance Ip for Provisioning Service"
    }
  }
}
