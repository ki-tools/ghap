{
  "Description" : "Cloudformation Stack for Virtual Private Grid for Analysts",
  "Mappings": {
    "AvailabilityZone": {
      "A": { "ZONEID": "us-east-1a" },
      "B": { "ZONEID": "us-east-1c" }
    },
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-1b1aee70" },
      "us-west-2"      : { "AMI" : "ami-5595a665" }
    }
  },
  "Parameters": {
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Description": "EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "autoscaling"
    },
    "ServerAccess": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "GhapVPC": {
      "ConstraintDescription": "The VPC Id",
      "Description": "The VPC Id",
      "Default" : "vpc-b8aa98dd",
      "Type": "String"
    },
    "GhapPrivateSubnetA": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-20c3a279",
      "Type": "String"
    },
    "GhapPrivateSubnetB": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-a3bf3488",
      "Type": "String"
    },
    "GhapPublicSubnetA": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-21c3a278",
      "Type": "String"
    },
    "GhapPublicSubnetB": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-a2bf3489",
      "Type": "String"
    },
    "GhapNatSecurityGroup" : {
      "Description": "Security Id for Nat Security Group",
      "Default" : "sg-e75b6483",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain or subdomain to be used.",
      "Type": "String",
      "Default" : "qa.ghap.io",
      "ConstraintDescription" : "Must specify ghap.io or dev.ghap.io.",
      "AllowedValues" : ["ghap.io", "dev.ghap.io", "qa.ghap.io"]
    },
    "UserVolumeId" : {
      "Description" : "The Volume Id to attach to the instance",
      "Type" : "String",
      "Default" : "vol-c4479282"
    },
    "UniqueId" : {
      "Description" : "UUID from Stash for the User",
      "Type" : "String",
      "Default" : "f96b2d74-645e-4a08-b22f-ce70102733e9"
    },
    "Username": {
      "Description": "The Username of the User",
      "Type": "String",
      "Default" : "erin.guinan"
    },
    "AWSAccessKey": {
      "Description": "AWS Access Key. Use in CLI",
      "Type": "String",
      "Default" : ""
    },
    "AWSSecretKey": {
      "Description": "AWS Secret Key. Use in CLI",
      "Type": "String",
      "Default" : ""
    },
    "SQSRole": {
      "Description": "Role for publishing autoscaling events",
      "Type": "String",
      "Default" : "arn:aws:iam::091012940692:role/autoscaling-hook"
    },
    "MinInstanceCount": {
      "Description": "Min instance count in autoscaling group",
      "Type": "Number",
      "Default" : 1
    },
    "MaxInstanceCount": {
      "Description": "Max instance count in autoscaling group",
      "Type": "Number",
      "Default" : 3
    }
  },
  "Conditions": {
    "AttachUserStorage": {
      "Fn::Not" : [{
        "Fn::Equals" : [
          {"Ref" : "UserVolumeId"},
          "UNSET"
        ]
      }]
    }
  },
  "Resources" : {
    "ComputeHead": {
      "DependsOn" : ["GhapScalingQueue"],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computehead" ]
          },
          "configure_computehead" : {
            "commands" : {
              "01-updateservername" : {
                "command" : "hostname > /var/lib/torque/server_name",
                "ignoreErrors" : "false"
              },
              "02-updatemomconfig" : {
                "command" : { "Fn::Join" : ["", [ "echo \"\\$pbsserver ", {"Ref": "UniqueId"}, "\" > /var/lib/torque/mom_priv/config"]]},
                "ignoreErrors" : "false"
              },
              "03-updatefstab" : {
                "command" : "echo \"/dev/xvdf /torquefs ext4 defaults 0 0\" >> /etc/fstab",
                "ignoreErrors" : "false"
              },
              "04-updatesysconfignfs" : {
                "command" : "echo \"LOCKD_TCPPORT=32803\" >> /etc/sysconfig/nfs && echo \"LOCKD_UDPPORT=32769\" >> /etc/sysconfig/nfs && echo \"MOUNTD_PORT=892\" >> /etc/sysconfig/nfs",
                "ignoreErrors" : "false"
              },
              "05-update": {
                "command": "/bin/bash /tmp/update.sh\n",
                "ignoreErrors": "true"
              },
              "06-createmungekey" : {
                "command" : "create-munge-key",
                "ignoreErrors" : "false"
              },
              "07-Munge": {
                "command": "service munge start\n",
                "ignoreErrors": "true"
              },
              "08-JoinDomain": {
                "command": "/opt/pbis/bin/domainjoin-cli join prod.ghap.io administrator \n",
                "ignoreErrors": "true"
              },
              "09-trqauthd": {
                "command": "trqauthd\n",
                "ignoreErrors": "true"
              },
              "10-mauicfg": {
                "command": { "Fn::Join" : ["", [ "sed -i -- s/computehead/", {"Ref": "UniqueId"}, "/g /var/spool/maui/maui.cfg"]]},
                "ignoreErrors": "true"
              },
              "11-maui": {
                "command": "service maui start\n",
                "ignoreErrors": "true"
              },
              "12a-pbs": {
                "command": "/bin/bash /home/centos/configure_pbs.sh",
                "ignoreErrors": "true"
              },
              "12b-pbs": {
                "command": "service pbs_server start",
                "ignoreErrors": "true"
              }
            },
            "services" : {
              "sysvinit" : {
                "pbs_mom" : { "enabled" : "true", "ensureRunning" : "true" },
                "nfs" : { "enabled" : "true", "ensureRunning" : "true" },
                "nfslock" : { "enabled" : "true", "ensureRunning" : "true" },
                "ypserv" : { "enabled" : "true", "ensureRunning" : "true" },
                "yppasswdd" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            },
            "users": {
              "analyst": {
                "groups": [
                  "users"
                ],
                "homeDir": "/torquefs",
                "uid": "1000"
              }
            },
            "packages" : {
              "python" : {
                "awscli" : []
              },
              "yum" : {
                "cloud-utils" : []
              }
            },
            "files" : {
              "/etc/sysconfig/network" : {
                "content" : { "Fn::Join" : ["", [ "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=", {"Ref": "UniqueId"}, "\nNISDOMAIN=dynamic.grid\n"]]}
              },
              "/tmp/update.sh": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash \n",

                  "usermod --shell /bin/bash analyst \n",
                  "chown -R analyst.users /torquefs \n",
                  "chmod 755 /torquefs\n",
                  "echo analyst | passwd --stdin analyst \n",
                  "cat /etc/ssh/sshd_config | sed s/PasswordAuthentication\\ no/PasswordAuthentication\\ yes/g > /tmp/sshd_config \n",
                  "mv /tmp/sshd_config /etc/ssh/sshd_config \n",
                  "service sshd restart \n",
                  "cd /tmp\n",
                  "aws s3 cp s3://ghap-autoscale/scalegrouplistener-1.0.zip ./\n",
                  "unzip ./scalegrouplistener-1.0.zip\n",
                  "cd ./scalegrouplistener-1.0/bin\n",
                  "chmod 777 ./scalegrouplistener\n"
                ]]}
              },
              "/torquefs/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "region=us-east-1",
                      "output=json"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "analyst"
              },
              "/torquefs/.aws/credentials": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "aws_access_key_id=",
                      { "Ref": "AWSAccessKey" },
                      "\n",
                      "aws_secret_access_key=",
                      { "Ref": "AWSSecretKey" },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "analyst"
              },
              "/root/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "region=us-east-1",
                      "output=json"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "root"
              },
              "/root/.aws/credentials": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "aws_access_key_id=",
                      { "Ref": "AWSAccessKey" },
                      "\n",
                      "aws_secret_access_key=",
                      { "Ref": "AWSSecretKey" },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "root"
              },
              "/tmp/processHook.sh": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "cd /tmp/scalegrouplistener-1.0/bin\n",
                  "./scalegrouplistener /tmp/autoscaling.properties"
                ]]},
                "mode" : "000677",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/autoscaling.properties": {
                "content" : { "Fn::Join" : ["", [
                  "sqs.name=",
                  {"Ref" : "GhapScalingQueue"},
                  "\n"
                ]]},
                "mode" : "000677",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "m3.large",
        "KeyName": { "Ref": "KeyName" },
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "ComputeSecurityGroup" } ],
            "SubnetId": { "Ref" : "GhapPublicSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "crontab -l > mycron\n",
                "echo '* * * * * /tmp/processHook.sh' >>  mycron\n",
                "crontab mycron\n",
                "rm mycron\n",
                "hostname ", {"Ref": "UniqueId"}, "\n",
                "echo `ifconfig eth0 | grep \"inet addr\" | awk -F: '{print $2}' | awk '{print $1}'` `hostname` >> /etc/hosts\n",
                "cp ~centos/.ssh/authorized_keys ~root/.ssh/authorized_keys\n",
                "cfn-init -s ", { "Ref": "AWS::StackName" },
                "         -r ComputeHead ",
                "         --region ", { "Ref" : "AWS::Region" },
                "         -c InstallAndRun \n",
                "/usr/bin/qmgr -c \"create queue ghap queue_type=execution\"\n",
                "/usr/bin/qmgr -c \"set queue ghap started=true\"\n",
                "/usr/bin/qmgr -c \"set queue ghap enabled=true\"\n",
                "/usr/bin/qmgr -c \"set queue ghap resources_default.nodes=1\"\n",
                "/usr/bin/qmgr -c \"set queue ghap resources_default.walltime=3600\"\n",
                "/usr/bin/qmgr -c \"set server default_queue=ghap\"\n",
                "/usr/bin/qmgr -c \"set server acl_hosts = ", {"Ref": "UniqueId"}, "\"\n",
                "/usr/bin/qmgr -c \"set server scheduling=true\"\n",
                "/usr/bin/qmgr -c \"set server display_job_server_suffix=false\"\n",
                "mount /torquefs \n",
                "chown -R \"PROD\\", {"Ref": "Username"}, "\" /torquefs \n",
                "chgrp -R \"PROD\\domain^users\" /torquefs \n",
                "echo /torquefs *\\(rw,sync,no_root_squash,no_subtree_check\\) >> /etc/exports\n",
                "exportfs -a\n",
                "echo umask 000 >> /etc/profile\n",
                "echo cd /torquefs >> /etc/profile\n",
                "cfn-signal -e $? ",
                "           --stack=",{"Ref": "AWS::StackName"},
                "           --resource=ComputeHead \n"
              ]
            ]}
        },
        "Volumes" : [
          { "VolumeId" : { "Ref": "UserVolumeId" }, "Device" : "/dev/xvdf" }
        ],
        "Tags" : [
          {"Key" : "Name", "Value" : "Linux Compute Head Instance"}
        ]
      },
      "Type": "AWS::EC2::Instance"
    },

    "GhapScalingQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "VisibilityTimeout": 60
      }
    },
    "GhapNotificationTopic" : {
      "Properties" : {
        "Subscription": [{
          "Endpoint": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
          "Protocol": "sqs"
        }]
      },
      "Type" : "AWS::SNS::Topic"
    },
    "GhapTerminateLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "DefaultResult" : "CONTINUE",
        "HeartbeatTimeout" : 300,
        "AutoScalingGroupName": { "Ref": "WebServerGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
        "RoleARN": { "Ref": "SQSRole" }
      }
    },
    "GhapLaunchLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "DefaultResult" : "CONTINUE",
        "HeartbeatTimeout" : 300,
        "AutoScalingGroupName": { "Ref": "WebServerGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
        "RoleARN": { "Ref": "SQSRole" }
      }
    },
    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : ["ComputeHead"],
      "Properties" : {
        "AvailabilityZones": [
          {
            "Fn::FindInMap": [
              "AvailabilityZone",
              "A",
              "ZONEID"
            ]
          }
        ],
        "VPCZoneIdentifier": [{"Ref": "GhapPrivateSubnetA"}],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : {"Ref" : "MinInstanceCount"},
        "MaxSize" : {"Ref" : "MaxInstanceCount"}
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : ["ComputeHead"],
      "Metadata": {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-createmungekey" : {
                "command" : "create-munge-key",
                "ignoreErrors" : "false"
              },
              "02-updateservername" : {
                "command" : { "Fn::Join" : ["", [ "echo ", {"Ref": "UniqueId"}, " > /var/lib/torque/server_name"]]},
                "ignoreErrors" : "false"
              },
              "03-updatemomconfig" : {
                "command" : { "Fn::Join" : ["", [ "echo \"\\$pbsserver ", {"Ref": "UniqueId"}, "\" > /var/lib/torque/mom_priv/config"]]},
                "ignoreErrors" : "false"
              },
              "04-updatefstab" : {
                "command" : { "Fn::Join" : ["", [ "echo \"", {"Ref": "UniqueId"}, ":/torquefs\t/torquefs\tnfs\trsize=8192,wsize=8192,timeo=14,intr\n\" >> /etc/fstab"]]},
                "ignoreErrors" : "false"
              },
              "05-update": {
                "command": "/bin/bash /tmp/update.sh\n",
                "ignoreErrors": "true"
              }
            },
            "services" : {
              "sysvinit" : {
                "pbs_mom" : { "enabled" : "true", "ensureRunning" : "true" },
                "munge" : { "enabled" : "true", "ensureRunning" : "true" },
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            },
            "files" : {
              "/etc/sysconfig/network" : {
                "content" : "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=computenodeone\n"
              },
              "/tmp/autoscaling.properties": {
                "content" : { "Fn::Join" : ["", [
                  "master.ip=",
                  { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] },
                  "\n"
                ]]},
                "mode" : "000677",
                "owner" : "root",
                "group" : "root"
              },
              "/tmp/putScalingMetric.sh": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash\n",
                  "cd /tmp/scalegrouplistener-1.0/bin\n",
                  "./scalegrouplistener /tmp/autoscaling.properties test putMetric"
                ]]},
                "mode" : "000677",
                "owner" : "root",
                "group" : "root"
              },
              "/root/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "region=us-east-1",
                      "output=json"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "root"
              },
              "/root/.aws/credentials": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "aws_access_key_id=",
                      { "Ref": "AWSAccessKey" },
                      "\n",
                      "aws_secret_access_key=",
                      { "Ref": "AWSSecretKey" },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "root"
              },
              "/home/centos/.aws/config": {
                "content": {
                  "Fn::Join": [
                    "\n",
                    [
                      "[default]",
                      "region=us-east-1",
                      "output=json"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "centos"
              },
              "/home/centos/.aws/credentials": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "[default]\n",
                      "aws_access_key_id=",
                      { "Ref": "AWSAccessKey" },
                      "\n",
                      "aws_secret_access_key=",
                      { "Ref": "AWSSecretKey" },
                      "\n"
                    ]
                  ]
                },
                "mode" : "000777",
                "owner" : "centos"
              },
              "/tmp/update.sh": {
                "content" : { "Fn::Join" : ["", [
                  "#!/bin/bash \n",
                  "cd /tmp\n",
                  "aws s3 cp s3://ghap-autoscale/scalegrouplistener-1.0.zip ./\n",
                  "unzip ./scalegrouplistener-1.0.zip\n",
                  "cd ./scalegrouplistener-1.0/bin\n",
                  "chmod 777 ./scalegrouplistener\n"
                ]]},
                "mode" : "000777",
                "owner" : "centos"
              }
            },
            "packages" : {
              "python": {
                "awscli": []
              },
              "yum": {
                "cloud-utils": []
              }
            }
          }
        },
        "files" : {
          "/home/centos/linuxvpg.pem" : {
            "content" : { "Fn::Join" : ["", [
              "-----BEGIN RSA PRIVATE KEY-----\n",
              " Some cert goes here...  \n",
              "-----END RSA PRIVATE KEY-----\n"
            ]]},
            "mode"  : "000400",
            "owner" : "root",
            "group" : "root"
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c4.4xlarge",
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups" : [{ "Ref": "ComputeSecurityGroup" }],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "hostname `$(ec2metadata --instance-id)`\n",
                "crontab -l > mycron\n",
                "echo '* * * * * /tmp/putScalingMetric.sh' >>  mycron\n",
                "crontab mycron\n",
                "rm mycron\n",
                "echo `ifconfig eth0 | grep \"inet addr\" | awk -F: '{print $2}' | awk '{print $1}'` `hostname` >> /etc/hosts\n",
                "echo ", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, " ",
                {"Ref": "UniqueId"}, " >> /etc/hosts\n","\n",
                "cfn-init -s ", { "Ref": "AWS::StackName" },
                "         -r LaunchConfig ",
                "         --region ", { "Ref" : "AWS::Region" },
                "         -c InstallAndRun \n",
                "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/centos/linuxvpg.pem root@",
                { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, " \"echo ",
                " `ifconfig eth0 | grep \"inet addr\" | awk -F: '{print $2}' | awk '{print $1}'` `hostname` >> /etc/hosts\"\n",
                "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/centos/linuxvpg.pem root@",
                { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] },
                " \"echo ", " `hostname` np=15>> /var/lib/torque/server_priv/nodes\"\n",
                "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/centos/linuxvpg.pem root@",
                { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] },
                " \"qmgr -c \\\"create node `hostname` np=15\\\"\" \n",
                "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -i /home/centos/linuxvpg.pem root@",
                { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] },
                " \"pbsnodes -r \\\"`hostname`\\\"\" \n",
                "mount ", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, ":/torquefs /torquefs \n",
                "service pbs_mom restart \n",
                "cfn-signal -e $? ",
                "           --stack=",{"Ref": "AWS::StackName"},
                "           --resource=WebServerGroup \n"
              ]
            ]}
        }
      }
    },

    "WebServerScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "WebServerScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "ComputeSecurityGroup": {
      "Properties": {
        "GroupDescription": "Compute Head Security Group",
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Ref": "ServerAccess" },
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          },
          {
            "CidrIp": { "Ref": "ServerAccess" },
            "FromPort": "53",
            "IpProtocol": "tcp",
            "ToPort": "53"
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "389",
            "ToPort" : "389",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "443",
            "ToPort" : "443",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "445",
            "ToPort" : "445",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "15001",
            "ToPort" : "15001",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "15002",
            "ToPort" : "15002",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "15003",
            "ToPort" : "15003",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "111",
            "ToPort" : "111",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "892",
            "ToPort" : "892",
            "CidrIp" : { "Ref" : "ServerAccess" }
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "2049",
            "ToPort" : "2049",
            "CidrIp" : { "Ref" : "ServerAccess" }
          }],
        "VpcId": { "Ref": "GhapVPC" }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },

    "CloudWatchIncreaseCapacityAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmActions" : [ { "Ref" : "WebServerScaleUpPolicy" } ],
        "AlarmDescription" : "Increase autoscaling group",
        "ComparisonOperator" : "GreaterThanOrEqualToThreshold",
        "Dimensions" : [ {"Name":"AutoScalingGroupName", "Value":"WebServerGroup"} ],
        "EvaluationPeriods" : 2,
        "MetricName" : { "Fn::Join" : ["", [
          "JobsCount-",
          { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }
        ]]},
        "Namespace" : "Ghap",
        "Period" : 120,
        "Statistic" : "Average",
        "Threshold" : 1.0
      }
    },

    "CloudWatchDecreaseCapacityAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmActions" : [ { "Ref" : "WebServerScaleDownPolicy" } ],
        "AlarmDescription" : "Decrease autoscaling group",
        "ComparisonOperator" : "LessThanOrEqualToThreshold",
        "Dimensions" : [ {"Name":"AutoScalingGroupName", "Value":"WebServerGroup"} ],
        "EvaluationPeriods" : 2,
        "MetricName" : { "Fn::Join" : ["", [
          "JobsCount-",
          { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }
        ]]},
        "Namespace" : "Ghap",
        "Period" : 120,
        "Statistic" : "Average",
        "Threshold" : 1.0
      }
    }
  }
}
