{
  "Description" : "Cloudformation Stack for Linux Slurm 10node VPG for Analysts",
  "Mappings": {
    "AvailabilityZone": {
      "ZoneOne": { "ZONEID": "us-east-1b" },
      "ZoneTwo": { "ZONEID": "us-east-1c" }
    },
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-0722bbed23b399144" }
    }	
  },
  "Parameters": {
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Description": "EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ghap-linux-qa"
    },
    "ServerAccess": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "GhapVPC": {
      "ConstraintDescription": "The VPC Id",
      "Description": "The VPC Id",
      "Default" : "vpc-9d67e0f9",
	  "Type": "String"
    },
    "GhapPrivateSubnetA": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-d2d428a4",
	  "Type": "String"
    },
    "GhapPrivateSubnetB": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-54a5b20d",
	  "Type": "String"
    },
    "GhapPublicSubnetA": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-d4d428a2",
	  "Type": "String"
    },
    "GhapPublicSubnetB": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-55a5b20c",
	  "Type": "String"
    },
    "GhapNatSecurityGroup" : {
      "Description": "Security Id for Nat Security Group",
      "Default" : "sg-c03153a6",
	  "Type": "String"
    },
    "Domain": {
      "Description": "The domain or subdomain to be used.",
      "Type": "String",
      "Default" : "qa.ghap.io",
      "ConstraintDescription" : "Must specify ghap.io, dev.ghap.io, qa.ghap.io, or samba.ghap.io",
      "AllowedValues" : ["ghap.io", "dev.ghap.io", "qa.ghap.io", "samba.ghap.io"]
    },
    "IdleResourcesSNSTopicArn" : {
      "Description": "The ARN to the SNS Topic that can receive notification regarding Idle Resources",
      "Default" : "unknown",
      "Type": "String"
    },
    "UniqueId" : {
      "Description" : "UUID from Stash for the User",
      "Type" : "String"
    },
    "Username": {
      "Description": "The Username of the User",
      "Type": "String",
      "Default" : "Unknown"
    },
    "Email" : {
      "Description" : "The Email address of the User",
      "Type" : "String",
      "Default" : "Unknown"
    },
    "SQSRole": {
      "Description": "Role for publishing autoscaling events",
      "Type": "String",
      "Default" : "arn:aws:iam::091012940692:role/autoscaling-hook"
    }
  },
  "Resources" : {
	"ComputeHead": {
	  "CreationPolicy": {
	    "ResourceSignal": {
	      "Timeout": "PT30M"
	  }
	},
	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computehead" ]
          },
	  "configure_computehead" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "06-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridsrv-static.sh \n",
                 "ignoreErrors" : "false"
              },
              "07-Configure-DotFiles" : {
                 "command" : "/bin/sh /root/tools/create_user_dotfiles.sh \n",
                 "ignoreErrors" : "false"
              }
            },
	     "services" : {
              "sysvinit" : {
                "nfs" : { "enabled" : "true", "ensureRunning" : "true" },
                "nfslock" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            }
          }		  
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "m3.large",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeHead"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPublicSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeHead ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeHead \n"
                ]
             ]
          }
      	}
      },
      "Type": "AWS::EC2::Instance"
    },
    "ComputeNodeOne": {
	    "Type" : "AWS::EC2::Instance",
		"DependsOn" : ["ComputeHead", "ComputeNodeTwo", "ComputeNodeThree", "ComputeNodeFour", "ComputeNodeFive", "ComputeNodeSix", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
		"CreationPolicy": {
			"ResourceSignal": {
			"Timeout": "PT30M"
			}
		},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
	  }
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #1"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
		"UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeOne ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeOne \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeTwo": {
	    "Type" : "AWS::EC2::Instance",
		"DependsOn" : ["ComputeHead", "ComputeNodeThree", "ComputeNodeFour", "ComputeNodeFive", "ComputeNodeSix", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
		"CreationPolicy": {
			"ResourceSignal": {
			"Timeout": "PT30M"
			}
		},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
	  }
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #2"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
		"UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeTwo ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeTwo \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeThree": {
	    "Type" : "AWS::EC2::Instance",
		"DependsOn" : ["ComputeHead", "ComputeNodeFour", "ComputeNodeFive", "ComputeNodeSix", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
		"CreationPolicy": {
			"ResourceSignal": {
			"Timeout": "PT30M"
			}
		},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
	  }
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #3"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
		"UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeThree ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeThree \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeFour": {
	    "Type" : "AWS::EC2::Instance",
		"DependsOn" : ["ComputeHead", "ComputeNodeFive", "ComputeNodeSix", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
		"CreationPolicy": {
			"ResourceSignal": {
			"Timeout": "PT30M"
			}
		},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
	  }
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #4"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
		"UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeFour ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeFour \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeFive": {
	    "Type" : "AWS::EC2::Instance",
		"DependsOn" : ["ComputeHead", "ComputeNodeSix", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
		"CreationPolicy": {
			"ResourceSignal": {
			"Timeout": "PT30M"
			}
		},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:QA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
	  }
	}
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
	"Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #5"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
	],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
		"UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeFive ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeFive \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeSix": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : ["ComputeHead", "ComputeNodeSeven", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                "command" : "echo STAGE:QA >> /root/host.settings\n",
                "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #6"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeSix ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeSix \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeSeven": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : ["ComputeHead", "ComputeNodeEight", "ComputeNodeNine", "ComputeNodeTen" ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                "command" : "echo STAGE:QA >> /root/host.settings\n",
                "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #7"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeSeven ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeSeven \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeEight": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : ["ComputeHead", "ComputeNodeNine", "ComputeNodeTen" ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                "command" : "echo STAGE:QA >> /root/host.settings\n",
                "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #8"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeEight ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeEight \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeNine": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : ["ComputeHead", "ComputeNodeTen" ],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                "command" : "echo STAGE:QA >> /root/host.settings\n",
                "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #9"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeNine ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeNine \n"
              ]
            ]
          }
        }
      }
    },
    "ComputeNodeTen": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn" : ["ComputeHead"],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT30M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                "command" : "echo STAGE:QA >> /root/host.settings\n",
                "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "05-Record-GridSrvName" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "06-Record-GridSrvIP" : {
                "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                "ignoreErrors" : "false"
              },
              "07-Record-HostInfo" : {
                "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                "ignoreErrors" : "false"
              },
              "08-Configure-Host" : {
                "command" : "/bin/sh /root/tools/ghap_configure_linux_slurm-gridnode-static.sh \n",
                "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.8xlarge",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux Slurm 10node VPG",{"Ref": "Username"},"ComputeNode #10"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.13"},
          {"Key" : "Ghap-Stage", "Value" : "QA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "DeleteOnTermination": "true",
            "DeviceIndex": "0",
            "GroupSet": [ "sg-e1057898" ],
            "SubnetId": { "Ref" : "GhapPrivateSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeNodeTen ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeNodeTen \n"
              ]
            ]
          }
        }
      }
    },

    "CostControlsMechanisms": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/ghap-provisioning-templates-us-east-1-qa/ghap-cost-control-mechanisms-v1.0.json",
        "TimeoutInMinutes": "60",
        "Parameters": {
          "IdleResourcesSNSTopicArn" : { "Ref": "IdleResourcesSNSTopicArn" },
          "ProvisionedInstanceId" : { "Ref" : "ComputeHead" }
        }
      }
    }
  }
}
