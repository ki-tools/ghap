{
  "Description" : "Cloudformation Stack for Linux Virtual Private Grid (Autoscale) for Analysts",
  "Mappings": {
    "AvailabilityZone": {
      "ZoneOne": { "ZONEID": "us-east-1b" },
      "ZoneTwo": { "ZONEID": "us-east-1c" }
    },
    "RegionMap" : {
      "us-east-1"      : { "AMI" : "ami-0ab2ccd9a916af50d" }
    }
  },
  "Parameters": {
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Description": "EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "ghap-linux-dev"
    },
    "ServerAccess": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "Must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "GhapVPC": {
      "ConstraintDescription": "The VPC Id",
      "Description": "The VPC Id",
      "Default" : "vpc-be65c1da",
      "Type": "String"
    },
    "GhapPrivateSubnetA": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-8f012ea4",
      "Type": "String"
    },
    "GhapPrivateSubnetB": {
      "Description": "Private Subnet Id for Availability Zone",
      "Default" : "subnet-c6c226b0",
      "Type": "String"
    },
    "GhapPublicSubnetA": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-89012ea2",
      "Type": "String"
    },
    "GhapPublicSubnetB": {
      "Description": "Public Subnet Id for Availability Zone",
      "Default" : "subnet-d9c226af",
      "Type": "String"
    },
    "GhapNatSecurityGroup" : {
      "Description": "Security Id for Nat Security Group",
      "Default" : "sg-5872b73e",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain or subdomain to be used.",
      "Type": "String",
      "Default" : "samba.ghap.io",
      "ConstraintDescription" : "Must specify ghap.io, dev.ghap.io, qa.ghap.io, or samba.ghap.io",
      "AllowedValues" : ["ghap.io", "dev.ghap.io", "qa.ghap.io", "samba.ghap.io"]
    },
    "IdleResourcesSNSTopicArn" : {
      "Description": "The ARN to the SNS Topic that can receive notification regarding Idle Resources",
      "Default" : "unknown",
      "Type": "String"
    },
    "UniqueId" : {
      "Description" : "UUID from Stash for the User",
      "Type" : "String"
    },
    "Username": {
      "Description": "The Username of the User",
      "Type": "String",
      "Default" : "Unknown"
    },
    "Email" : {
      "Description" : "The Email address of the User",
      "Type" : "String",
      "Default" : "Unknown"
    },
    "SQSRole": {
      "Description": "Role for publishing autoscaling events",
      "Type": "String",
      "Default" : "arn:aws:iam::091012940692:role/autoscaling-hook"
    }
  },
  "Resources" : {
    "ComputeHead": {
      "DependsOn" : ["GhapScalingQueue"],
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computehead" ]
          },
          "configure_computehead" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:SAMBA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "05-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "06-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_gridsrv.sh \n",
                 "ignoreErrors" : "false"
              },
              "07-Configure-DotFiles" : {
                 "command" : "/bin/sh /root/tools/create_user_dotfiles.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "nfs" : { "enabled" : "true", "ensureRunning" : "true" },
                "nfslock" : { "enabled" : "true", "ensureRunning" : "true" }
              }
            },
            "files" : {
              "/usr/local/etc/autoscaling.properties": {
                "content" : { "Fn::Join" : ["", [
                  "sqs.name=",
                  {"Ref" : "GhapScalingQueue"},
                  "\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "m3.large",
        "KeyName": { "Ref": "KeyName" },
        "Tags" : [
          {"Key" : "Name", "Value" : {"Fn::Join":[" - ",["Ghap Linux VPG",{"Ref": "Username"},"ComputeHead"]]}},
          {"Key" : "Ghap-Platform", "Value" : "Linux"},
          {"Key" : "Ghap-Release", "Value" : "1.16"},
          {"Key" : "Ghap-Stage", "Value" : "SAMBA"},
          {"Key" : "Ghap-User", "Value" : {"Ref": "Username"} }
        ],
        "SourceDestCheck": false,
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "ZoneOne", "ZONEID" ] },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "true",
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ "sg-9e077ae7" ],
            "SubnetId": { "Ref" : "GhapPublicSubnetA"}
          }
        ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource ComputeHead ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource ComputeHead \n"
                ]
             ]
          }
        }
      },
      "Type": "AWS::EC2::Instance"
    },

    "GhapScalingQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "VisibilityTimeout": 60
      }
    },
    "GhapNotificationTopic" : {
      "Properties" : {
        "Subscription": [{
          "Endpoint": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
          "Protocol": "sqs"
        }]
      },
      "Type" : "AWS::SNS::Topic"
    },
    "GhapTerminateLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "DefaultResult" : "CONTINUE",
        "HeartbeatTimeout" : 300,
        "AutoScalingGroupName": { "Ref": "LinuxVpgGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_TERMINATING",
        "NotificationTargetARN": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
        "RoleARN": { "Ref": "SQSRole" }
      }
    },
    "GhapLaunchLifecycleHook": {
      "Type": "AWS::AutoScaling::LifecycleHook",
      "Properties": {
        "DefaultResult" : "CONTINUE",
        "HeartbeatTimeout" : 300,
        "AutoScalingGroupName": { "Ref": "LinuxVpgGroup" },
        "LifecycleTransition": "autoscaling:EC2_INSTANCE_LAUNCHING",
        "NotificationTargetARN": { "Fn::GetAtt": ["GhapScalingQueue", "Arn"] },
        "RoleARN": { "Ref": "SQSRole" }
      }
    },
    "LinuxVpgGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "DependsOn" : ["ComputeHead"],
      "Properties" : {
        "AvailabilityZones": [
          {
            "Fn::FindInMap": [
              "AvailabilityZone",
              "ZoneOne",
              "ZONEID"
            ]
          }
        ],
        "VPCZoneIdentifier": [{"Ref": "GhapPrivateSubnetA"}],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "3",
        "Tags" : [ {
          "Key" : "Name",
          "Value" : {"Fn::Join":[" - ",["Ghap Linux VPG",{"Ref": "Username"},"ComputeNode"]]},
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Ghap-Platform",
          "Value" : "Linux",
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Ghap-Release",
          "Value" : "1.16",
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Ghap-Stage",
          "Value" : "SAMBA",
          "PropagateAtLaunch" : "true"
        }, {
          "Key" : "Ghap-User",
          "Value" : {"Ref": "Username"},
          "PropagateAtLaunch" : "true"
        } ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M",
          "Count"   : "1"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "1",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "true"
        }
      }
    },

    "LaunchConfig" : {
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn" : ["ComputeHead"],
      "Metadata": {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "configure_computenode" ]
          },
          "configure_computenode" : {
            "commands" : {
              "01-Record-Stage" : {
                 "command" : "echo STAGE:SAMBA >> /root/host.settings\n",
                 "ignoreErrors" : "false"
              },
              "02-Record-Userid" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERID:", {"Ref": "UniqueId"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "03-Record-Username" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USERNAME:", {"Ref": "Username"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "04-Record-UserEmail" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"USEREMAIL:", {"Ref": "Email"}, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "06-Record-GridSrvName" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_NAME:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateDnsName" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "07-Record-GridSrvIP" : {
                 "command" : { "Fn::Join" : ["", [ "echo \"GRIDSRV_IP:", { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }, "\" >> /root/host.settings"]]},
                 "ignoreErrors" : "false"
              },
              "08-Record-HostInfo" : {
                 "command" : "/bin/sh /root/tools/ghap_record_host_info.sh \n",
                 "ignoreErrors" : "false"
              },
              "09-Configure-Host" : {
                 "command" : "/bin/sh /root/tools/ghap_configure_linux_gridnode.sh \n",
                 "ignoreErrors" : "false"
              }
            },
            "services" : {
              "sysvinit" : {
                "iptables" :  { "enabled" : "false", "ensureRunning" : "false" },
                "ip6tables" : { "enabled" : "false", "ensureRunning" : "false" }
              }
            },
            "files" : {
              "/usr/local/etc/autoscaling.properties": {
                "content" : { "Fn::Join" : ["", [
                  "master.ip=",
                  { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] },
                  "\n"
                ]]},
                "mode" : "000644",
                "owner" : "root",
                "group" : "root"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "RegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "c3.4xlarge",
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups" : [ "sg-9e077ae7" ],
        "UserData" : {
          "Fn::Base64" : {
            "Fn::Join" : [
              "", [
                "#!/bin/bash\n",
                "cfn-init -v ",
                " --stack ", { "Ref": "AWS::StackName" },
                " --resource LaunchConfig ",
                " --region ", { "Ref" : "AWS::Region" },
                " --configsets InstallAndRun \n",
                "cfn-signal -e $? ",
                " --stack ",{"Ref": "AWS::StackName"},
                " --resource LinuxVpgGroup \n"
              ]
            ]}
        }
      }
    },

    "LinuxVpgScaleUpPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "LinuxVpgGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "1"
      }
    },
    "LinuxVpgScaleDownPolicy" : {
      "Type" : "AWS::AutoScaling::ScalingPolicy",
      "Properties" : {
        "AdjustmentType" : "ChangeInCapacity",
        "AutoScalingGroupName" : { "Ref" : "LinuxVpgGroup" },
        "Cooldown" : "60",
        "ScalingAdjustment" : "-1"
      }
    },

    "CloudWatchIncreaseCapacityAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmActions" : [ { "Ref" : "LinuxVpgScaleUpPolicy" } ],
        "AlarmDescription" : "Increase autoscaling group",
        "ComparisonOperator" : "GreaterThanThreshold",
        "Dimensions" : [ {"Name":"AutoScalingGroupName", "Value":"LinuxVpgGroup"} ],
        "EvaluationPeriods" : 4,
        "MetricName" : { "Fn::Join" : ["", [
          "JobsCount-",
          { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }
        ]]},
        "Namespace" : "Ghap",
        "Period" : 60,
        "Statistic" : "Average",
        "Threshold" : 1.0
      }
    },

    "CloudWatchDecreaseCapacityAlarm" : {
      "Type" : "AWS::CloudWatch::Alarm",
      "Properties" : {
        "ActionsEnabled" : true,
        "AlarmActions" : [ { "Ref" : "LinuxVpgScaleDownPolicy" } ],
        "AlarmDescription" : "Decrease autoscaling group",
        "ComparisonOperator" : "LessThanThreshold",
        "Dimensions" : [ {"Name":"AutoScalingGroupName", "Value":"LinuxVpgGroup"} ],
        "EvaluationPeriods" : 15,
        "MetricName" : { "Fn::Join" : ["", [
          "JobsCount-",
          { "Fn::GetAtt" : [ "ComputeHead", "PrivateIp" ] }
        ]]},
        "Namespace" : "Ghap",
        "Period" : 60,
        "Statistic" : "Average",
        "Threshold" : 1.0
      }
    },
    "CostControlsMechanisms": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "https://s3.amazonaws.com/ghap-provisioning-templates-us-east-1-samba/ghap-cost-control-mechanisms-v1.0.json",
        "TimeoutInMinutes": "60",
        "Parameters": {
          "IdleResourcesSNSTopicArn" : { "Ref": "IdleResourcesSNSTopicArn" },
          "ProvisionedInstanceId" : { "Ref" : "ComputeHead" }
        }
      }
    }
  }
}
