{
  "Parameters" : {
    "ServerAccess" : {
      "Description" : "CIDR IP range allowed to login to the NAT instance",
      "Type" : "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default" : "0.0.0.0/0",
      "AllowedPattern" : "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription" : "must be a valid CIDR range of the form x.x.x.x/x."
    },
    "KeyName" : {
      "ConstraintDescription" : "Must be the name of an existing EC2 KeyPair.",
      "Description" : "EC2 Key Pair to allow SSH access to the instance",
      "Type" : "AWS::EC2::KeyPair::KeyName"
    },
    "AvailabilityZone" : {
      "Default" : "us-west-2a",
      "Description" : "Availability Zone to create the stack in",
      "Type" : "String"
    }
  },
  "Mappings" : {
    "SubnetConfig" : {
      "VPC"     : { "CIDR" : "10.20.0.0/16" },
      "Public"  : { "CIDR" : "10.20.0.0/24" }
    },
    "NatRegionMap" : {
      "us-east-1"      : { "AMI" : "ami-00381a68" },
      "us-west-2"      : { "AMI" : "ami-6b351b5b" }
    }
  },
  "Resources" : {
    "TrelliscopeVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "VPC", "CIDR" ] }
      }
    },
    "TrelliscopeInternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway"
    },
    "TrelliscopePublicSubnet" : {
      "DependsOn" : ["TrelliscopeVPC"],
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "TrelliscopeVPC" },
        "CidrBlock" : { "Fn::FindInMap" : [ "SubnetConfig", "Public", "CIDR" ] },
      	"AvailabilityZone" : { "Ref" : "AvailabilityZone" }
      }
    },
    "TrelliscopeGatewayToInternet" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "TrelliscopeVPC" },
        "InternetGatewayId" : { "Ref" : "TrelliscopeInternetGateway" }
      }
    },
    "TrelliscopePublicRouteTable" : {
      "DependsOn" : ["TrelliscopeVPC", "TrelliscopeInternetGateway"],
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "TrelliscopeVPC" }
      }
    },
    "TrelliscopePublicRoute" : {
      "DependsOn" : ["TrelliscopePublicRouteTable", "TrelliscopeInternetGateway" ],
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "TrelliscopePublicRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "TrelliscopeInternetGateway" }
      }
    },
    "TrelliscopePublicSubnetRouteTableAssociation" : {
      "DependsOn" : ["TrelliscopePublicSubnet", "TrelliscopePublicRouteTable"],
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "TrelliscopePublicSubnet" },
        "RouteTableId" : { "Ref" : "TrelliscopePublicRouteTable" }
      }
    },
    "TrelliscopeNatSecurityGroup" : {
      "DependsOn" : [ "TrelliscopeVPC" ],
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Nat Security Group",
        "VpcId" : { "Ref" : "TrelliscopeVPC" },
        "SecurityGroupIngress" : [{
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "ServerAccess" }
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "80",
          "ToPort" : "80",
          "CidrIp" : { "Ref" : "ServerAccess" }
        },
        {
          "IpProtocol" : "tcp",
          "FromPort" : "443",
          "ToPort" : "443",
          "CidrIp" : { "Ref" : "ServerAccess" }
        }]
      }
    },
    "TrelliscopeNatSshSecurityGroupIngress" : {
      "DependsOn" : ["TrelliscopeNatSecurityGroup"],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "22",
        "ToPort" : "22",
        "SourceSecurityGroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" }
      }
    },
    "TrelliscopeNatHttpsSecurityGroupIngress" : {
      "DependsOn" : ["TrelliscopeNatSecurityGroup"],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "443",
        "ToPort" : "443",
        "SourceSecurityGroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" }
      }
    },
    "TrelliscopeNatHttpSecurityGroupIngress" : {
      "DependsOn" : ["TrelliscopeNatSecurityGroup"],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" },
        "IpProtocol" : "tcp",
        "FromPort" : "80",
        "ToPort" : "80",
        "SourceSecurityGroupId" : { "Ref" : "TrelliscopeNatSecurityGroup" }
      }
    },
    "TrelliscopeIP" : {
  		"Type" : "AWS::EC2::EIP",
  		"Properties" : {
  			"Domain" : "vpc"
  		}
  	},
  	"TrelliscopeIPAssociation" : {
  	  "Type" : "AWS::EC2::EIPAssociation",
  	  "Properties" : {
  	    "AllocationId" : { "Fn::GetAtt": [ "TrelliscopeIP", "AllocationId" ] },
  	    "InstanceId" : { "Ref" : "TrelliscopeInstance" }
  	  }
  	},
  	"TrelliscopeVolume" : {
  		"Type" : "AWS::EC2::Volume",
  		"Properties" : {
  			"AvailabilityZone" : { "Ref" : "AvailabilityZone" },
  			"Encrypted" : true,
  			"VolumeType" : "gp2",
  			"Size" : 500
  		}	
  	},
    "TrelliscopeInstance" : {
    	"Type" : "AWS::EC2::Instance",
      "DependsOn" : [ "TrelliscopeVolume" ],
      "Properties" : {
      	"AvailabilityZone" : { "Ref" : "AvailabilityZone" },
      	"SourceDestCheck" : false,
        "ImageId" : { "Fn::FindInMap" : [ "NatRegionMap", { "Ref" : "AWS::Region" }, "AMI" ]},
        "InstanceType": "m3.medium",
        "NetworkInterfaces" : [ {
        	"GroupSet" : [{ "Ref" : "TrelliscopeNatSecurityGroup" }],
        	"AssociatePublicIpAddress" : true,
        	"DeviceIndex": "0",
        	"DeleteOnTermination": true,
        	"SubnetId" : { "Ref" : "TrelliscopePublicSubnet" }
        }],
        "KeyName" : {
          "Ref" : "KeyName"
        },
      	"Volumes" : [ { 
        	"Device" : "/dev/xvdm",
        	"VolumeId" : { "Ref" : "TrelliscopeVolume" }
        } ],
        "UserData" : {
          "Fn::Base64" : {
          "Fn::Join" : [
            "", [
                "#!/bin/bash\n",
                "hostname trelliscope\n",
                "mkdir /opt/trelliscope\n",
                "mkfs /dev/xvdm -t ext4\n",
                "cfn-init -s ", { "Ref": "AWS::StackName" },
                "         -r TrelliscopeInstance ",
                "         --region ", { "Ref" : "AWS::Region" },
                "         -c InstallAndRun \n",
                "# Signal the status from cfn-init\n",
                "cfn-signal -e $? ",
                "           --stack=", { "Ref" : "AWS::StackName" },
                "           --region ", { "Ref" : "AWS::Region" },
                "           --resource=TrelliscopeInstance \n"
            ]
          ]}
      	}
    	},
     	"Metadata" : {
        "AWS::CloudFormation::Init" : {
          "configSets" : {
            "InstallAndRun" : [ "trelliscopeinit", "shinyserver", "httpdrestart" ]
          },
          "trelliscopeinit" : {
            "packages": {
              "yum" : {
                "libcurl-devel" : [],
                "openssl-devel" : [],
                "libpng-devel" : [],
                "R" : [],
                "mod_ssl" : []
              }
            },
           	"services" : {
              "sysvinit" : {
                  "iptables" : { "enabled" : "false", "ensureRunning" : "false"},
                  "ip6tables" : { "enabled" : "false", "ensureRunning" : "false"},
                  "postfix" : { "enabled" : "false", "ensureRunning" : "false"},
                  "httpd" : { "enabled" : "true", "ensureRunning" : "true" }
          		}
          	},
            "files" : {
  	 	      	"/etc/sysconfig/network" : {
    	 	      	"content" : "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=trelliscope\n"
      	 	  	},
      	 	  	"/etc/hosts" : {
      	 	  		"content" : "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n"
      	 	  	},
      	 	  	"/etc/httpd/conf.d/proxy.conf" : {
                "content" : "ProxyPass / http://localhost:3838/\nProxyPassReverse / http://localhost:3838/\n"
              },
              "/etc/httpd/conf.d/locations.conf" : {
                "content" : { "Fn::Join" : [
                            "", [
                            "<Location />\n",
                            "AuthType Basic\n",
                            "AuthName \"Trelliscope\"\n",
                            "AuthBasicProvider file\n",
                            "AuthUserFile /etc/httpd/passwd/passwords\n",
                            "Require valid-user\n",
                            "</Location>\n" ]
                ]}
              },
              "/etc/httpd/conf.d/rewrite.conf" : {
                "content" : { "Fn::Join" : [
                  "", ["RewriteEngine on\nRewriteCond %{HTTPS} =off\n",
                  "RewriteLog /var/log/httpd/rewrite_log\n",
                  "RewriteLogLevel 1\nRewriteRule / https://", {"Ref" : "TrelliscopeIP" },"%{REQUEST_URI} [L]\n"
                  ]
                ]}
              }
    	     	},
    	     	"commands" : {
 	    	    	"updatefstab" : {
   	    	    	"command" : "echo \"/dev/xvdm /opt/trelliscope ext4 defaults 0 0\" >> /etc/fstab && mount -a\n",
     	    	    "ignoreErrors" : "false"
       	  		},
       	  		"installshiny" : {
       	  		  "command" : "R -e \"install.packages('shiny', repos='http://cran.rstudio.com/')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installrmarkdown" : {
       	  		  "command" : "R -e \"install.packages('rmarkdown', repos='http://cran.rstudio.com/')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installjsonlite" : {
       	  		  "command" : "R -e \"install.packages('jsonlite', repos='http://cran.rstudio.com/')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installdevtools" : {
       	  		  "command" : "R -e \"install.packages('devtools', repos='http://cran.rstudio.com/')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installtestthat" : {
       	  		  "command" : "R -e \"install.packages('testthat', repos='http://cran.rstudio.com/')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installtesseradata" : {
       	  		  "command" : "R -e \"options(unzip = 'unzip', repos = 'http://cran.rstudio.com/'); library(devtools); install_github('tesseradata/datadr')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installtesseratrellisccope" : {
       	  		  "command" : "R -e \"options(unzip = 'unzip', repos = 'http://cran.rstudio.com/'); library(devtools); install_github('tesseradata/trelliscope')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"installgnuplot" : {
       	  		  "command" : "R -e \"install.packages('ggplot2', repos='http://cran.rstudio.com')\"",
       	  		  "ignoreErrors" : "false"
       	  		},
       	  		"getshinyserver" : {
       	  		  "command" : "curl http://download3.rstudio.org/centos-5.9/x86_64/shiny-server-1.3.0.403-rh5-x86_64.rpm -o /tmp/shiny-server.rpm",
       	  		  "ignoreErrors" : "false"
       	  		}
     	    	}
      	  },
      	  "shinyserver" : {
            "commands": {
              "installshinyserver" : {
                "command" : "yum install -y --nogpgcheck /tmp/shiny-server.rpm",
                "ignoreErrors" : "false"
              }
            }
      	  },
      	  "httpdrestart" : {
            "commands" : {
              "mkdir" : {
                "command" : "service httpd restart",
                "ignoreErrors" : "false"
              }
            }
          }
        }
      },
    	"CreationPolicy" : {
    		"ResourceSignal" : {
      		"Timeout" : "PT30M"
      	}
    	}
  	}
  }
}