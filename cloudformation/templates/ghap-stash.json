{
  "Description" : "Cloudformation Stack for Stash Git Backend",
  "Mappings": {
    "AvailabilityZone": {
      "A": { "ZONEID": "us-east-1a" },
      "B": { "ZONEID": "us-east-1c" }
    }
  },
  "Parameters": {
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Description": "EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ServerAccess": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "WebServerInstanceProfile" : {
      "Description": "The Web Server Instance Profile Id",
      "Type": "String"
    },
    "GhapVPC": {
      "ConstraintDescription": "The VPC Id",
      "Description": "The VPC Id",
      "Type": "String"
    },
    "GhapPrivateSubnetA": {
      "Description": "Private Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPrivateSubnetB": {
      "Description": "Private Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPublicSubnetA": {
      "Description": "Public Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPublicSubnetB": {
      "Description": "Public Subnet Id for Availability Zone",
      "Type": "String"
    },
    "DBAllocatedStorage": {
      "ConstraintDescription": "Must be between 1 and 1024Gb.",
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "MaxValue": "1024",
      "MinValue": "5",
      "Type": "Number"
    },
    "DBPassword": {
      "AllowedPattern": "[a-zA-Z0-9]+",
      "ConstraintDescription": "must contain only alphanumeric characters.",
      "Default": "globalhealthanalysisplatform",
      "Description": "Database Password",
      "MaxLength": "41",
      "MinLength": "1",
      "NoEcho": "true",
      "Type": "String"
    },
    "DBUser": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters.",
      "Default": "ghap",
      "Description": "Database Username",
      "MaxLength": "16",
      "MinLength": "1",
      "NoEcho": "true",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain or subdomain to be used.",
      "Type": "String",
      "ConstraintDescription" : "Must specify ghap.io, dev.ghap.io., or qa.ghap.io.",
      "AllowedValues" : ["ghap.io.", "samba.ghap.io.", "dev.ghap.io.", "qa.ghap.io."]
    },
    "DeploymentTarget" : {
      "Description" : "Deployment Target, this is either prod, devtest, qa",
      "AllowedValues" : ["prod", "qa","devtest", "samba"],
      "Type" : "String",
      "Default" : "prod"
    },
    "GhapNatSecurityGroup" : {
      "Description": "Security Id for Nat Security Group",
      "Type": "String"
    },
    "GhapStashSecurityGroup" : {
      "Type" : "String",
      "Description" : "Ghap Stash Security Group Id"
    },
    "GhapStashDBSecurityGroup" : {
      "Type" : "String",
      "Description" : "Ghap OAuth Database Security Group Id"
    }
  },
  "Conditions": {
    "CreateDevTestResources": {
      "Fn::Or" : [
        {
          "Fn::Equals": [
            {"Ref": "DeploymentTarget"},
            "devtest"
          ]
        },
        {
          "Fn::Equals": [
            {"Ref": "DeploymentTarget"},
            "qa"
          ]
        },
        {
          "Fn::Equals": [
            {"Ref": "DeploymentTarget"},
            "samba"
          ]
        }
      ]
    },
    "CreateProdResources": {
      "Fn::Equals": [
        {"Ref": "DeploymentTarget"},
        "prod"
      ]
    }
  },
  "Resources" : {
    "GhapStashDBSubnetGroup": {
      "Properties": {
        "DBSubnetGroupDescription": "Stash DB Subnet Group",
        "SubnetIds": [
          { "Ref": "GhapPrivateSubnetA" },
          { "Ref": "GhapPrivateSubnetB" }
        ]
      },
      "Type": "AWS::RDS::DBSubnetGroup"
    },
    "GhapStashDatabase": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AllocatedStorage": { "Ref": "DBAllocatedStorage" },
        "DBInstanceClass": "db.m3.medium",
        "DBName": "StashDB",
        "DBSecurityGroups": [ { "Ref": "GhapStashDBSecurityGroup" }],
        "DBSubnetGroupName": { "Ref": "GhapStashDBSubnetGroup" },
        "Engine": "postgres",
        "EngineVersion": "9.3.5",
        "MasterUserPassword": { "Ref": "DBPassword" },
        "MasterUsername": { "Ref": "DBUser" },
        "MultiAZ": "true",
        "PubliclyAccessible": "false",
        "VPCSecurityGroups": [ { "Ref": "GhapStashSecurityGroup" } ]
      },
      "Type": "AWS::RDS::DBInstance"
    },
    "GhapProdStashInstance": {
      "Condition" : "CreateProdResources",
      "DependsOn" : ["GhapProdStashVolume"],
      "CreationPolicy": {
        "ResourceSignal": { "Timeout": "PT30M" }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "buildgit": {
            "commands": {
              "build": {
                "command": "cd /usr/src/git-2.0.1 && make prefix=/usr all\n",
                "ignoreErrors": "false"
              },
              "install": {
                "command": "cd /usr/src/git-2.0.1 && make prefix=/usr install\n",
                "ignoreErrors": "false"
              }
            }
          },
          "configSets": {
            "InstallAndRun": [
              "stashinit",
              "extract",
              "updateowner",
              "buildgit",
              "httpdssl"
            ]
          },
          "extract": {
            "commands": {
              "extractgit": {
                "command": "tar --directory=/usr/src -xvf /tmp/git-2.0.1.tar.gz\n",
                "ignoreErrors": "false"
              },
              "extractstash": {
                "command": "tar --directory=/atlassian/stash -xvf /tmp/atlassian-stash-3.8.0.tar.gz\n",
                "ignoreErrors": "false"
              }
            }
          },
          "httpdssl": {
            "commands": {
              "mkdir": {
                "command": "mkdir /etc/httpd/ssl",
                "ignoreErrors": "false"
              }
            }
          },
          "stashinit": {
            "commands": {
              "getgit": {
                "command": "cd /tmp && wget https://www.kernel.org/pub/software/scm/git/git-2.0.1.tar.gz\n",
                "ignoreErrors": "false"
              },
              "getstash": {
                "command": "cd /tmp && wget https://www.atlassian.com/software/stash/downloads/binary/atlassian-stash-3.8.0.tar.gz\n",
                "ignoreErrors": "false"
              },
              "updatefstab": {
                "command": "echo \"/dev/xvdm /atlassian ext4 defaults 0 0\" >> /etc/fstab && mount -a && mkdir /atlassian/stash\n",
                "ignoreErrors": "false"
              }
            },
            "files": {
              "/etc/hosts": {
                "content": "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n"
              },
              "/etc/httpd/conf.d/proxy.conf": {
                "content": "ProxyPass /stash http://localhost:7990/stash\nProxyPassReverse /stash http://localhost:7990/stash\n"
              },
              "/etc/httpd/conf.d/rewrite.conf": {
                "content": "RewriteEngine on\nRewriteCond %{HTTPS} =off\nRewriteLog /var/log/httpd/rewrite_log\nRewriteLogLevel 1\nRewriteRule /stash https://54.86.45.185%{REQUEST_URI} [L]\n"
              },
              "/etc/sysconfig/network": {
                "content": "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=git.ghap.io\n"
              },
              "/etc/pki/tls/certs/localhost.crt" : {
                "content" : { "Fn::Join" : ["\n",
                  [
"-----BEGIN CERTIFICATE-----",
" Some cert goes here ",
"-----END CERTIFICATE-----"
                  ]
                ]}
              },
              "/etc/pki/tls/private/localhost.key" : {
                "content" : { "Fn::Join" : ["\n",
                  [
"-----BEGIN RSA PRIVATE KEY-----",
" Some cert goes here ",
"-----END RSA PRIVATE KEY-----"
                  ]
                ]}
              }
            },
            "groups": {
              "atlassian": {
                "gid": "1000"
              }
            },
            "packages": {
              "yum": {
                "expat-devel": [],
                "gcc": [],
                "gettext-devel": [],
                "libcurl-devel": [],
                "mod_ssl": [],
                "openssl-devel": [],
                "perl-ExtUtils-MakeMaker": [],
                "zlib-devel": []
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "ip6tables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "iptables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "postfix": {
                  "enabled": "false",
                  "ensureRunning": "false"
                }
              }
            },
            "users": {
              "stash": {
                "groups": [ "users", "atlassian" ],
                "homeDir": "/atlassian/stash",
                "uid": "1000"
              }
            }
          },
          "updateowner": {
            "commands": {
              "changeowner": {
                "command": "chown -R stash.atlassian /atlassian/stash\n",
                "ignoreErrors": "false"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ] },
        "ImageId": "ami-00381a68",
        "InstanceType": "m3.large",
        "KeyName": { "Ref": "KeyName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": false,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "GhapStashSecurityGroup" }, { "Ref" : "GhapNatSecurityGroup"} ],
            "SubnetId": { "Ref": "GhapPrivateSubnetA" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "hostname stash\n",
                "mkdir /atlassian\n",
                "mkfs /dev/xvdm -t ext4\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                "         -r GhapProdStashInstance ",
                "         -c InstallAndRun \n",
                "# Signal the status from cfn-init\n",
                "cfn-signal -e $? ",
                "           --stack=",
                { "Ref": "AWS::StackName" },
                "           --resource=GhapProdStashInstance \n"
              ]
            ]
          }
        },
        "Volumes": [
          {
            "Device": "/dev/xvdm",
            "VolumeId": { "Ref": "GhapProdStashVolume" }
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "GhapDevTestStashInstance": {
      "Condition" : "CreateDevTestResources",
      "DependsOn" : ["GhapStashVolume"],
      "CreationPolicy": {
        "ResourceSignal": { "Timeout": "PT30M" }
      },
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "buildgit": {
            "commands": {
              "build": {
                "command": "cd /usr/src/git-2.0.1 && make prefix=/usr all\n",
                "ignoreErrors": "false"
              },
              "install": {
                "command": "cd /usr/src/git-2.0.1 && make prefix=/usr install\n",
                "ignoreErrors": "false"
              }
            }
          },
          "configSets": {
            "InstallAndRun": [
              "stashinit",
              "extract",
              "updateowner",
              "buildgit",
              "httpdssl"
            ]
          },
          "extract": {
            "commands": {
              "extractgit": {
                "command": "tar --directory=/usr/src -xvf /tmp/git-2.0.1.tar.gz\n",
                "ignoreErrors": "false"
              },
              "extractstash": {
                "command": "tar --directory=/atlassian/stash -xvf /tmp/atlassian-stash-3.8.0.tar.gz\n",
                "ignoreErrors": "false"
              }
            }
          },
          "httpdssl": {
            "commands": {
              "mkdir": {
                "command": "mkdir /etc/httpd/ssl",
                "ignoreErrors": "false"
              }
            }
          },
          "stashinit": {
            "commands": {
              "getgit": {
                "command": "cd /tmp && wget https://www.kernel.org/pub/software/scm/git/git-2.0.1.tar.gz\n",
                "ignoreErrors": "false"
              },
              "getstash": {
                "command": "cd /tmp && wget https://www.atlassian.com/software/stash/downloads/binary/atlassian-stash-3.8.0.tar.gz\n",
                "ignoreErrors": "false"
              },
              "updatefstab": {
                "command": "echo \"/dev/xvdm /atlassian ext4 defaults 0 0\" >> /etc/fstab && mount -a && mkdir /atlassian/stash\n",
                "ignoreErrors": "false"
              }
            },
            "files": {
              "/etc/hosts": {
                "content": "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n"
              },
              "/etc/httpd/conf.d/proxy.conf": {
                "content": "ProxyPass /stash http://localhost:7990/stash\nProxyPassReverse /stash http://localhost:7990/stash\n"
              },
              "/etc/httpd/conf.d/rewrite.conf": {
                "content": "RewriteEngine on\nRewriteCond %{HTTPS} =off\nRewriteLog /var/log/httpd/rewrite_log\nRewriteLogLevel 1\nRewriteRule /stash https://54.86.45.185%{REQUEST_URI} [L]\n"
              },
              "/etc/sysconfig/network": {
                "content": "NETWORKING=yes\nNETWORKING_IPV6=no\nHOSTNAME=git.ghap.io\n"
              },
              "/etc/pki/tls/certs/localhost.crt" : {
                "content" : { "Fn::Join" : ["\n",
                  [
                    "-----BEGIN CERTIFICATE-----",
		    " Some cert goes here ",
                    "-----END CERTIFICATE-----"
                  ]
                ]}
              },
              "/etc/pki/tls/private/localhost.key" : {
                "content" : { "Fn::Join" : ["\n",
                  [
                    "-----BEGIN RSA PRIVATE KEY-----",
		    " Some cert goes here ",
                    "-----END RSA PRIVATE KEY-----"
                  ]
                ]}
              }
            },
            "groups": {
              "atlassian": {
                "gid": "1000"
              }
            },
            "packages": {
              "yum": {
                "expat-devel": [],
                "gcc": [],
                "gettext-devel": [],
                "libcurl-devel": [],
                "mod_ssl": [],
                "openssl-devel": [],
                "perl-ExtUtils-MakeMaker": [],
                "zlib-devel": []
              }
            },
            "services": {
              "sysvinit": {
                "httpd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                },
                "ip6tables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "iptables": {
                  "enabled": "false",
                  "ensureRunning": "false"
                },
                "postfix": {
                  "enabled": "false",
                  "ensureRunning": "false"
                }
              }
            },
            "users": {
              "stash": {
                "groups": [ "users", "atlassian" ],
                "homeDir": "/atlassian/stash",
                "uid": "1000"
              }
            }
          },
          "updateowner": {
            "commands": {
              "changeowner": {
                "command": "chown -R stash.atlassian /atlassian/stash\n",
                "ignoreErrors": "false"
              }
            }
          }
        }
      },
      "Properties": {
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ] },
        "ImageId": "ami-00381a68",
        "InstanceType": "m3.large",
        "KeyName": { "Ref": "KeyName" },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": false,
            "DeleteOnTermination": true,
            "DeviceIndex": "0",
            "GroupSet": [ { "Ref": "GhapStashSecurityGroup" }, { "Ref" : "GhapNatSecurityGroup"} ],
            "SubnetId": { "Ref": "GhapPrivateSubnetA" }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "hostname stash\n",
                "mkdir /atlassian\n",
                "mkfs /dev/xvdm -t ext4\n",
                "cfn-init -s ",
                {
                  "Ref": "AWS::StackName"
                },
                "         -r GhapDevTestStashInstance ",
                "         -c InstallAndRun \n",
                "# Signal the status from cfn-init\n",
                "cfn-signal -e $? ",
                "           --stack=",
                { "Ref": "AWS::StackName" },
                "           --resource=GhapDevTestStashInstance \n"
              ]
            ]
          }
        },
        "Volumes": [
          {
            "Device": "/dev/xvdm",
            "VolumeId": { "Ref": "GhapStashVolume" }
          }
        ]
      },
      "Type": "AWS::EC2::Instance"
    },
    "GhapStashVolume": {
      "Condition" : "CreateDevTestResources",
      "Properties": {
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ]},
        "Encrypted": true,
        "Size": 1000,
        "Tags" : [
          { "Key" : "RepositoryVolume", "Value" : "True" },
          { "Key" : "UserVolume", "Value" : "False" },
          { "Key" : "Backup", "Value" : "False" },
          { "Key" : "DeploymentTarget", "Value" : { "Ref" : "DeploymentTarget" } }
        ],
        "VolumeType": "gp2"
      },
      "Type": "AWS::EC2::Volume"
    },
    "GhapStashBackupVolume": {
      "Condition" : "CreateProdResources",
      "Properties": {
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ]},
        "Encrypted": true,
        "Size": 1000,
        "Tags" : [
          { "Key" : "RepositoryVolume", "Value" : "False" },
          { "Key" : "UserVolume", "Value" : "False" },
          { "Key" : "Backup", "Value" : "False" },
          { "Key" : "DeploymentTarget", "Value" : { "Ref" : "DeploymentTarget" } }
        ],
        "VolumeType": "gp2"
      },
      "Type": "AWS::EC2::Volume"
    },
    "GhapStashBackupVolumeAttachment" : {
      "Condition" : "CreateProdResources",
      "Properties" : {
        "Device" : "/dev/xvdo",
        "InstanceId" : {"Ref" : "GhapProdStashInstance" },
        "VolumeId" : {"Ref" : "GhapStashBackupVolume" }
      },
      "Type" : "AWS::EC2::VolumeAttachment"
    },
    "GhapProdStashVolume": {
      "Condition" : "CreateProdResources",
      "Properties": {
        "AvailabilityZone": { "Fn::FindInMap": [ "AvailabilityZone", "A", "ZONEID" ]},
        "Encrypted": true,
        "Size": 1000,
        "Tags" : [
          { "Key" : "RepositoryVolume", "Value" : "True" },
          { "Key" : "UserVolume", "Value" : "False" },
          { "Key" : "Backup", "Value" : "True" },
          { "Key" : "DeploymentTarget", "Value" : { "Ref" : "DeploymentTarget" } }
        ],
        "VolumeType": "gp2"
      },
      "Type": "AWS::EC2::Volume"
    }
  }
}
