{
  "Description" : "Cloudformation Stack for Provisioning Service",
  "Parameters": {
    "KeyName": {
      "ConstraintDescription": "Must be the name of an existing EC2 KeyPair.",
      "Description": "EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "ServerAccess": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "CIDR IP range allowed to login to the NAT instance",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "WebServerInstanceProfile" : {
      "Description": "The Web Server Instance Profile Id",
      "Type": "String"
    },
    "GhapVPC": {
      "ConstraintDescription": "The VPC Id",
      "Description": "The VPC Id",
      "Type": "String"
    },
    "GhapPrivateSubnetA": {
      "Description": "Private Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPrivateSubnetB": {
      "Description": "Private Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPublicSubnetA": {
      "Description": "Public Subnet Id for Availability Zone",
      "Type": "String"
    },
    "GhapPublicSubnetB": {
      "Description": "Public Subnet Id for Availability Zone",
      "Type": "String"
    },
    "DBAllocatedStorage": {
      "ConstraintDescription": "Must be between 1 and 1024Gb.",
      "Default": "5",
      "Description": "The size of the database (Gb)",
      "MaxValue": "1024",
      "MinValue": "5",
      "Type": "Number"
    },
    "DBPassword": {
      "AllowedPattern": "[a-zA-Z0-9]+",
      "ConstraintDescription": "must contain only alphanumeric characters.",
      "Default": "globalhealthanalysisplatform",
      "Description": "Database Password",
      "MaxLength": "41",
      "MinLength": "1",
      "NoEcho": "true",
      "Type": "String"
    },
    "DBUser": {
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters.",
      "Default": "ghap",
      "Description": "Database Username",
      "MaxLength": "16",
      "MinLength": "1",
      "NoEcho": "true",
      "Type": "String"
    },
    "ProvisioningServiceNotificationHandlerRole" : {
      "Description" : "Reference to the ProvisioningServiceNotificationHandlerRole",
      "Type" : "String"
    },
    "ProvisioningServiceNotificationHandlerRoleARN" : {
      "Description" : "Reference to the ProvisioningServiceNotificationHandlerRole",
      "Type" : "String"
    },
    "ModelerAccessKey": {
      "Description": "Modeler Access Key",
      "Type": "String"
    },
    "ModelerSecretKey": {
      "Description": "Modeler Secret Key",
      "Type": "String"
    },
    "Domain": {
      "Description": "The domain or subdomain to be used.",
      "Type": "String",
      "ConstraintDescription" : "Must specify ghap.io, dev.ghap.io., qa.ghap.io.",
      "AllowedValues" : ["ghap.io.", "samba.ghap.io.", "dev.ghap.io.", "qa.ghap.io."]
    },
    "BeanstalkInstanceType" : {
      "Description" : "The instance type to use for beanstalk",
      "Type" : "String",
      "Default" : "t2.medium"
    },
    "GhapBeanstalkSecurityGroup" : {
      "Type" : "String",
      "Description" : "Ghap Beanstalk Security Group Id"
    },
    "GhapProvisioningDBSecurityGroup" : {
      "Description" : "Ghap Provisioning Database Security Group Id",
      "Type" : "String"
    },
    "DeploymentTarget" : {
      "Description" : "Deployment Target, this is either prod,qa or dev",
      "AllowedValues" : ["prod", "qa","devtest", "samba"],
      "Type" : "String",
      "Default" : "prod"
    }  
  },
  "Resources" : {
    "GhapProvisioningDBSubnetGroup": {
      "Properties": {
        "DBSubnetGroupDescription": "Project Service DB Subnet Group",
        "SubnetIds": [ { "Ref": "GhapPrivateSubnetA" },{ "Ref": "GhapPrivateSubnetB" } ]
      },
      "Type": "AWS::RDS::DBSubnetGroup"
    },
    "GhapProvisioningDatabase": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "AllocatedStorage": {  "Ref": "DBAllocatedStorage" },
        "DBInstanceClass": "db.m3.medium",
        "DBName": "ProvisioningDB",
        "DBSecurityGroups": [ { "Ref": "GhapProvisioningDBSecurityGroup" } ],
        "DBSubnetGroupName": { "Ref": "GhapProvisioningDBSubnetGroup" },
        "Engine": "postgres",
        "EngineVersion": "9.3.5",
        "MasterUserPassword": { "Ref": "DBPassword" },
        "MasterUsername": { "Ref": "DBUser" },
        "MultiAZ": "true",
        "PubliclyAccessible": "false",
        "VPCSecurityGroups": [ { "Ref" : "GhapBeanstalkSecurityGroup"}  ]
      },
      "Type": "AWS::RDS::DBInstance"
    },
    "GhapProvisioningServiceApplication": {
      "Properties": {
        "Description": "GHAP Provisioning Service"
      },
      "Type": "AWS::ElasticBeanstalk::Application"
    },
    "GhapProvisioningServiceEnvironment": {
      "DependsOn": [ "GhapProvisioningServiceApplication", "GhapProvisioningServiceTemplate" ],
      "Properties": {
        "CNAMEPrefix" : {"Fn::Join" : ["-", [ "ghap", "provisioningservice", { "Ref" : "AWS::Region"}, {"Ref" : "DeploymentTarget" }]]},
        "ApplicationName": { "Ref": "GhapProvisioningServiceApplication" },
        "Description": "Ghap Provisioning Service",
        "TemplateName": { "Ref": "GhapProvisioningServiceTemplate" }
      },
      "Type": "AWS::ElasticBeanstalk::Environment"
    },
    "GhapProvisioningServiceTemplate": {
      "Properties": {
        "ApplicationName": { "Ref": "GhapProvisioningServiceApplication" },
        "Description": "Ghap Provisioning Service Configuration Template",
        "OptionSettings": [
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "EC2KeyName",
            "Value": { "Ref": "KeyName" }
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "s3.config.bucket",
            "Value": { "Fn::Join" : ["-",["ghap-configuration", {"Ref":"AWS::Region"} ,{"Ref":"DeploymentTarget"}]] }
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "archaius.deployment.environment",
            "Value": {"Ref":"DeploymentTarget"}
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "aws.secretKey",
            "Value": { "Ref" : "ModelerSecretKey" }
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "aws.accessKeyId",
            "Value": { "Ref" : "ModelerAccessKey" }
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "IamInstanceProfile",
            "Value": { "Ref": "WebServerInstanceProfile" }
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "InstanceType",
            "Value": {"Ref" : "BeanstalkInstanceType"}
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "SecurityGroups",
            "Value": { "Ref": "GhapBeanstalkSecurityGroup" }
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName" : "SSLCertificateId",
            "Value" : "arn:aws:iam::091012940692:server-certificate/provisioningservice.ghap.io"
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "LoadBalancerHTTPPort",
            "Value": "80"
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "LoadBalancerPortProtocol",
            "Value": "HTTP"
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "LoadBalancerHTTPSPort",
            "Value": "443"
          },
          {
            "Namespace": "aws:elb:loadbalancer",
            "OptionName": "LoadBalancerSSLPortProtocol",
            "Value": "HTTPS"
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "VPCId",
            "Value": { "Ref": "GhapVPC" }
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "AssociatePublicIpAddress",
            "Value": true
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "Subnets",
            "Value": {
              "Fn::Join": [
                ",",
                [ { "Ref": "GhapPublicSubnetA" }, { "Ref": "GhapPublicSubnetB" } ]
              ]
            }
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "ELBSubnets",
            "Value": {
              "Fn::Join": [
                ",",
                [ { "Ref": "GhapPublicSubnetA" }, { "Ref": "GhapPublicSubnetB" } ]
              ]
            }
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "JDBC_CONNECTION_STRING",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "jdbc:postgresql://",{ "Fn::GetAtt": [ "GhapProvisioningDatabase", "Endpoint.Address" ] },
                  ":",{ "Fn::GetAtt": [ "GhapProvisioningDatabase", "Endpoint.Port" ] },
                  "/ProvisioningDB"
                ]
              ]
            }
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "org.quartz.properties",
            "Value": { "Fn::Join" : ["", ["quartz-", {"Ref":"DeploymentTarget"},".properties"]]}
          },
          {
            "Namespace": "aws:elasticbeanstalk:application:environment",
            "OptionName": "org.quartz.dataSource.myDS.URL",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "jdbc:postgresql://",{ "Fn::GetAtt": [ "GhapProvisioningDatabase", "Endpoint.Address" ] },
                        ":",{ "Fn::GetAtt": [ "GhapProvisioningDatabase", "Endpoint.Port" ] },
                        "/ProvisioningDB"
                    ]
                ]
            }
          }

        ],
        "SolutionStackName": "64bit Amazon Linux 2015.03 v2.0.1 running Tomcat 8 Java 8"
      },
      "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate"
    },
    "GhapProvisioningServiceNotificationHandler": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Ref": "ProvisioningServiceNotificationHandlerRoleARN"
        },
        "Description" : "Lambda Function that subscribes to User Service SNS Topics",
        "Code": {
          "ZipFile": {
            "Fn::Join": ["\n", [
              "console.log('Loading function');",
              "exports.handler = function(event, context) {",
              "   console.log('Inside user service SNS topic lambda function');",
              "   //console.log('value2 =', event.key2);",
              "   context.succeed('successful handling of event');",
              "};"
            ]]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "25"
      }
    },
    "ProvisioningServiceDnsEntry" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "HostedZoneName" : {"Ref" : "Domain"},
        "Comment" : "DNS name for the Provisioning Service Instance",
        "Type" : "CNAME",
        "TTL" : "900",
        "Name" : {"Fn::Join" : [".", [ "provisioningservice", { "Ref" : "Domain" }]]},
        "ResourceRecords" : [ { "Fn::GetAtt" : [ "GhapProvisioningServiceEnvironment", "EndpointURL"]} ]
      }
    }
  },
  "Outputs": {
    "GhapProvisioningServiceNotificationHandlerOutput": {
      "Value": {
        "Ref": "GhapProvisioningServiceNotificationHandler"
      },
      "Description": "Reference to the Lambda handler that can handle notifications directed towards the Provisioning Service"
    },
    "GhapProvisioningServiceNotificationHandlerARNOutput": {
      "Value": {
        "Fn::GetAtt" : [ "GhapProvisioningServiceNotificationHandler", "Arn"]
      },
      "Description": "The ARN to the Lambda handler that can handle notifications directed towards the Provisioning Service"
    }
  }
}
